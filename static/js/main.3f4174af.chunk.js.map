{"version":3,"sources":["helpers/toRomans.js","helpers/fromRomans.js","pages/landing/index.js","routes/routes.js","layouts/default-layout/header.js","layouts/default-layout/layout.js","routes/routes-dumb.js","reportWebVitals.js","index.js"],"names":["toRoman","num","decimalValue","romanNumeral","romanized","index","length","fromRoman","str","map","result","len","current","before","isNaN","Home","Routes","key","path","component","React","useState","number","setNumber","setResult","className","FormControl","TextField","label","variant","value","onChange","e","target","Button","color","onClick","Number","parseInt","Header","Toolbar","Typography","defaultLayout","children","AppBar","position","RoutesDumb","route","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wSA8BeA,EA9BC,SAASC,GAoBvB,IAnBA,IAAIC,EAAe,CAAC,IAAM,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GACnEC,EAAe,CACjB,IACA,KACA,IACA,KACA,IACA,KACA,IACA,KACA,IACA,KACA,IACA,KACA,KAGEC,EAAY,GAEPC,EAAQ,EAAGA,EAAQH,EAAaI,OAAQD,IAC/C,KAAOH,EAAaG,IAAUJ,GAC5BG,GAAaD,EAAaE,GAC1BJ,GAAOC,EAAaG,GAIxB,OAAOD,GCMMG,EAjCG,SAASC,GAazB,IAZA,IAAIC,EAAM,CACR,EAAK,EACL,EAAK,EACL,EAAK,GACL,EAAK,GACL,EAAK,IACL,EAAK,IACL,EAAK,KAEHJ,EAAQ,EACRK,EAAS,EACTC,EAAMH,EAAIF,OACPD,EAAQM,GAAK,CAClB,IAAIC,EAAUH,EAAID,EAAIH,IAEtB,GADAK,GAAUE,EACNP,EAAQ,EAAG,CACb,IAAIQ,EAASJ,EAAID,EAAIH,EAAQ,IACZ,IAAZO,GAA6B,KAAZA,GAA8B,IAAXC,IACvCH,GAAU,GAEK,KAAZE,GAA8B,MAAZA,GAA+B,KAAXC,IACzCH,GAAU,IAEK,MAAZE,GAA+B,MAAZA,GAAgC,MAAXC,IAC3CH,GAAU,KAGdL,IAEF,OAAOS,MAAMJ,GAAU,iBAAmBA,G,OCsB7BK,IClDFC,EAAS,CACpB,CAACC,IAAK,EAAGC,KAAM,IAAKC,UDGtB,WAAiB,IAAD,EACcC,IAAMC,SAAS,IAD7B,mBACPC,EADO,KACCC,EADD,OAEcH,IAAMC,SAAS,KAF7B,mBAEPX,EAFO,KAECc,EAFD,KAYd,OACI,sBAAKC,UAAU,UAAf,UACE,sBAAKA,UAAU,aAAf,UACE,kKAKA,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACIC,MAAM,eACNC,QAAQ,WACRC,MAAOR,EACPS,SAAU,SAACC,GAAD,OAAOT,EAAUS,EAAEC,OAAOH,YAG1C,cAACJ,EAAA,EAAD,UACE,cAACQ,EAAA,EAAD,CACIL,QAAQ,WACRM,MAAM,UACNV,UAAU,QACVW,QA7BQ,WAChBC,OAAOC,SAAShB,GAClBE,EAAUxB,EAAQsB,IAElBE,EAAUjB,EAAUe,KAqBd,4BAUJ,qBAAKG,UAAU,YAAf,SACE,0CAAaf,a,kBEhCR6B,MAVf,WACE,OACI,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAYZ,QAAQ,KAApB,6B,eCWOa,MAbf,YAAoC,IAAZC,EAAW,EAAXA,SACtB,OACI,sBAAKlB,UAAU,WAAf,UACE,cAACmB,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,cAAC,EAAD,MAEF,qBAAKpB,UAAU,eAAf,SACGkB,QCOIG,EAdI,WACjB,OACI,cAAC,IAAD,UACE,cAAC,IAAD,UAGE,cAAC,EAAD,UACG9B,EAAOP,KAAI,SAAAsC,GAAK,OAAI,cAAC,IAAD,eAA2BA,GAAfA,EAAM9B,eCApC+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.3f4174af.chunk.js","sourcesContent":["const toRoman = function(num) {\n  let decimalValue = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n  let romanNumeral = [\n    'M',\n    'CM',\n    'D',\n    'CD',\n    'C',\n    'XC',\n    'L',\n    'XL',\n    'X',\n    'IX',\n    'V',\n    'IV',\n    'I',\n  ];\n\n  let romanized = '';\n\n  for (let index = 0; index < decimalValue.length; index++) {\n    while (decimalValue[index] <= num) {\n      romanized += romanNumeral[index];\n      num -= decimalValue[index];\n    }\n  }\n\n  return romanized;\n};\n\nexport default toRoman;\n","const fromRoman = function(str) {\n  let map = {\n    'I': 1,\n    'V': 5,\n    'X': 10,\n    'L': 50,\n    'C': 100,\n    'D': 500,\n    'M': 1000,\n  };\n  let index = 0;\n  let result = 0;\n  let len = str.length;\n  while (index < len) {\n    let current = map[str[index]];\n    result += current;\n    if (index > 0) {\n      let before = map[str[index - 1]];\n      if ((current === 5 || current === 10) && before === 1) {\n        result -= 2;\n      }\n      if ((current === 50 || current === 100) && before === 10) {\n        result -= 20;\n      }\n      if ((current === 500 || current === 1000) && before === 100) {\n        result -= 200;\n      }\n    }\n    index++;\n  }\n  return isNaN(result) ? 'Invalid number' : result;\n};\n\nexport default fromRoman;","import React from 'react';\nimport './index.css';\nimport {TextField, FormControl, Button} from '@material-ui/core';\nimport toRoman from '../../helpers/toRomans';\nimport fromRoman from '../../helpers/fromRomans';\n\nfunction Home() {\n  const [number, setNumber] = React.useState('');\n  const [result, setResult] = React.useState('-');\n\n  let calculateNumber = () => {\n    if (Number.parseInt(number)) {\n      setResult(toRoman(number));\n    } else {\n      setResult(fromRoman(number));\n    }\n  };\n\n  return (\n      <div className=\"landing\">\n        <div className=\"search-box\">\n          <h4>In the following field, you can enter both a number and a Roman\n            numeral\n            and convert the number to Roman numeral, and vice versa.\n          </h4>\n          {/* --- TODO: create component for searchbox --- */}\n          <FormControl>\n            <TextField\n                label=\"Enter Number\"\n                variant=\"outlined\"\n                value={number}\n                onChange={(e) => setNumber(e.target.value)}\n            />\n          </FormControl>\n          <FormControl>\n            <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                className=\"ml-10\"\n                onClick={calculateNumber}\n            >\n              Calculate\n            </Button>\n          </FormControl>\n        </div>\n        <div className=\"resultBox\">\n          <h4>Result: {result}</h4>\n        </div>\n      </div>\n  );\n}\n\nexport default Home;","import Landing from '../pages/landing';\n\nexport const Routes = [\n  {key: 1, path: '/', component: Landing},\n];","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\n\nfunction Header() {\n  return (\n      <Toolbar>\n        <Typography variant=\"h6\">\n          Roman Number\n        </Typography>\n      </Toolbar>\n  );\n}\n\nexport default Header;","import React from 'react';\nimport Header from './header';\nimport AppBar from '@material-ui/core/AppBar';\nimport './layout.css';\n\nfunction defaultLayout({children}) {\n  return (\n      <div className=\"app-main\">\n        <AppBar position=\"static\">\n          <Header/>\n        </AppBar>\n        <div className=\"main-content\">\n          {children}\n        </div>\n      </div>\n  );\n}\n\nexport default defaultLayout;","import React from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport {Routes} from './routes';\nimport DefaultLayout from '../layouts/default-layout/layout';\n\nconst RoutesDumb = () => {\n  return (\n      <BrowserRouter>\n        <Switch>\n          {/*TODO: Add auth and 404 routes here*/}\n          {/*<Route exact path=\"/404\" name=\"Page 404\" render={props => <Login {...props}/>}/>*/}\n          <DefaultLayout>\n            {Routes.map(route => <Route key={route.key} {...route} />)}\n          </DefaultLayout>\n        </Switch>\n      </BrowserRouter>\n  );\n};\n\nexport default RoutesDumb;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './routes/routes-dumb';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n      <Routes/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}